load("//bazel:bitdrift_build_system.bzl", "bitdrift_rust_library", "bitdrift_rust_shared_library")

exports_files(["AndroidManifest.xml"])

# JNI Implementation

# This shared library is consumed by the jvm targets which produce a file located
# at src/platform/jvm named either libcapture.so or libcapture.dylib depending on the platform.
# This allows the JniLibrary to load this with the name "capture" when the library path is set
# to src/platform/jvm.
bitdrift_rust_shared_library(
    name = "capture_shared",
    compile_data = [
        "jni_symbols.lds",
    ],
    crate_name = "capture",
    crate_root = "src/lib.rs",
    rustc_flags = [
        "-Clink-args=-lm",  # Required to avoid dlopen runtime failures unrelated to rust
        "-Clink-args=-lz",  # Link against system zlib library
    ] + select({
        "@platforms//os:android": [
            "-Clink-args=-Wl,-z,max-page-size=16384",  # enable 16 KB ELF alignment on Android to support API 35+
            "-Clink-args=-Wl,--retain-symbols-file=$(location :jni_symbols.lds)",
            "-Clink-args=-Wl,--build-id",  # Include build id in the binary
        ],
        "@platforms//os:linux": ["-Wl,--retain-symbols-file=$(location :jni_symbols.lds)"],
        # The linker on macos doesn't support the same options or file formats as linux, so use a pattern match here (not availabile on linux).
        # We could use another file which prefixes all the symbols with _, but this seems easier.
        "@platforms//os:macos": [
            "-Clink-args=-Wl,-exported_symbol,_Java_io_bitdrift_capture_network*",
            "-Clink-args=-Wl,-exported_symbol,_Java_io_bitdrift_capture_CaptureJni*",
            "-Clink-args=-Wl,-exported_symbol,_Java_io_bitdrift_capture_Jni*",
            "-Clink-args=-Wl,-exported_symbol,_JNI_OnLoad",
            "-Clink-args=-Wl,-framework,Security",
        ],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    tags = [
        "no-cache",
        "no-remote",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//platform/shared:platform-shared",
    ],
)

# This is Rust JNI implementation. Most of the logic lives here.
bitdrift_rust_library(
    name = "capture",
    visibility = ["//visibility:public"],
    deps = [
        "//platform/shared:platform-shared",
    ],
    alwayslink = True,
)

# Concatenate the proguard files from the capture and replay libraries
genrule(
    name = "proguard",
    srcs = [
        "//platform/jvm/capture:consumer-rules.pro",
        "//platform/jvm/replay:consumer-rules.pro",
    ],
    outs = ["proguard.txt"],
    cmd = "cat $(SRCS) > $@",
    visibility = ["//visibility:public"],
)
