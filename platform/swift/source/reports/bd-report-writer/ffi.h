// shared-core - bitdrift's common client/server libraries
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code is governed by a source available license that can be found in the
// LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

#pragma once

/* Warning: this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef const void **BDProcessorHandle;

typedef struct BDBinaryImage {
  const char *id;
  const char *path;
  uint64_t load_address;
} BDBinaryImage;

typedef struct BDThread {
  const char *name;
  const char *state;
  bool active;
  uint32_t index;
  float priority;
  int8_t quality_of_service;
} BDThread;

typedef struct BDCPURegister {
  const char *name;
  uint64_t value;
} BDCPURegister;

typedef struct BDStackFrame {
  int8_t type_;
  uint64_t frame_address;
  uint64_t symbol_address;
  const char *symbol_name;
  const char *class_name;
  const char *file_name;
  int64_t line;
  int64_t column;
  const char *image_id;
  uintptr_t state_count;
  const char *const *state;
  uintptr_t reg_count;
  const struct BDCPURegister *regs;
} BDStackFrame;

typedef struct BDDeviceMetrics {
  uint64_t time_seconds;
  uint32_t time_nanos;
  const char *timezone;
  const char *manufacturer;
  const char *model;
  const char *os_version;
  const char *os_brand;
  const char *os_fingerprint;
  const char *os_kernversion;
  int8_t power_state;
  uint8_t power_charge_percent;
  int8_t network_state;
  int8_t architecture;
  uint32_t display_height;
  uint32_t display_width;
  uint32_t display_density_dpi;
  int8_t platform;
  int8_t rotation;
  uint8_t cpu_abi_count;
  const char *const *cpu_abis;
} BDDeviceMetrics;

typedef struct BDAppMetrics {
  const char *app_id;
  const char *version;
  int64_t version_code;
  const char *cf_bundle_version;
  const char *running_state;
  uint64_t memory_used;
  uint64_t memory_free;
  uint64_t memory_total;
} BDAppMetrics;

/**
 * Entry point to creating a new Report
 *
 * * `handle`      - a reference to a pointer which will be replaced with a valid report processor.
 *   This reference should be retained and used for all other calls to `bdrw_*` functions.
 * * `report_type` - raw value of the `ReportType` which will be written
 * * `sdk_id`      - identifier of the integration sending the report
 * * `sdk_version` - version of the integration sending the report
 *
 * This function returns an object which is not managed by normal lifetime semantics and must be
 * discarded using `bdrw_dispose_buffer_handle()`
 */
void bdrw_create_buffer_handle(BDProcessorHandle handle,
                               int8_t report_type,
                               const char *sdk_id,
                               const char *sdk_version);

/**
 * Finishes Report creation and returns a pointer to the memory buffer
 * containing the report
 *
 * This function returns a null pointer in the event that the `handle`
 * pointer is invalid. It should also only be called **once**.
 *
 * # Safety
 * This function is safe to call provided `handle` is a valid reference to
 * a report processor, created with `bdrw_create_buffer_handle`
 */
const uint8_t *bdrw_get_completed_buffer(BDProcessorHandle handle, uint64_t *buffer_length);

/**
 * Disposes of the handle and *the associated memory buffer*.
 *
 * All actions involving the memory buffer returned from
 * `bdrw_get_completed_buffer()` should be completed prior to calling this
 * function.
 *
 * # Safety
 * This function is safe to call provided `handle` is a valid reference to
 * a report processor, created with `bdrw_create_buffer_handle`
 */
void bdrw_dispose_buffer_handle(BDProcessorHandle handle);

/**
 * Add a new binary image to the report. A valid value for both `image.id`
 * and `image.path` is required to add the image to the report or else the
 * input is discarded (returning `false`).
 *
 * # Safety
 * This function is safe to call provided `handle` is a valid reference to
 * a report processor, created with `bdrw_create_buffer_handle`
 */
bool bdrw_add_binary_image(BDProcessorHandle handle, const struct BDBinaryImage *image);

/**
 * Add a thread to the report, where `system_thread_count` is the (purely
 * informational) total number of threads running on the host system
 *
 * # Safety
 * This function is safe to call provided `handle` is a valid reference to
 * a report processor, created with `bdrw_create_buffer_handle`
 */
bool bdrw_add_thread(BDProcessorHandle handle,
                     uint16_t system_thread_count,
                     const struct BDThread *thread_ptr,
                     uint32_t stack_count,
                     const struct BDStackFrame *stack);

/**
 * Add an error to a report
 */
bool bdrw_add_error(BDProcessorHandle handle,
                    const char *name,
                    const char *reason,
                    int8_t relation_to_next,
                    uint32_t stack_count,
                    const struct BDStackFrame *stack);

/**
 * Add device info to the report
 *
 * # Safety
 * This function is safe to call provided `handle` is a valid reference to
 * a report processor, created with `bdrw_create_buffer_handle`
 */
bool bdrw_add_device(BDProcessorHandle handle, const struct BDDeviceMetrics *device_ptr);

/**
 * Add app info to the report
 *
 * # Safety
 * This function is safe to call provided `handle` is a valid reference to
 * a report processor, created with `bdrw_create_buffer_handle`
 */
bool bdrw_add_app(BDProcessorHandle handle, const struct BDAppMetrics *app_ptr);
