env:
  NDK_VERSION: 27.2.12479018

name: Build Android Integrations
on:
  workflow_call:
    inputs:
      version:
        description: 'The new version to tag, ex: 0.9.102'
        required: true
        type: string
  workflow_dispatch:
    inputs:
      version:
        description: 'The new version to release, ex: 0.9.102'
        required: true
        type: string
jobs:
  build-gradle-libraries:
    name: Build Gradle Libraries
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./platform/jvm
    steps:
    - name: Checkout project sources
      uses: actions/checkout@v4

    - name: Install JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
        cache: gradle
    - name: Cache Android NDK
      id: ndk-cache
      uses: actions/cache@v4
      with:
        path: ${{ env.ANDROID_SDK_ROOT }}/ndk/${{ env.NDK_VERSION }}
        key: ${{ runner.os }}-android-ndk-${{ env.NDK_VERSION }}
    - name: Verify cmdline-tools
      run: |
        CMDLINE_TOOLS_DIR="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin"
        if [ ! -x "$CMDLINE_TOOLS_DIR/sdkmanager" ]; then
          echo "cmdline-tools not found or incomplete. Installing..."
          mkdir -p $ANDROID_SDK_ROOT/cmdline-tools
          cd $ANDROID_SDK_ROOT/cmdline-tools
          curl -sSL https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -o cmdline-tools.zip
          unzip -q cmdline-tools.zip
          mv cmdline-tools latest
        else
          echo "cmdline-tools already installed."
        fi
    - name: Install Android NDK
      if: steps.ndk-cache.outputs.cache-hit != 'true'
      run: |
        export PATH=$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH
        yes | sdkmanager "ndk;${NDK_VERSION}"
    - name: Install Rust target
      run: rustup update && rustup target add aarch64-linux-android && rustup target add x86_64-linux-android
    - name: Build Timber artifacts with Gradle
      run: ./gradlew :capture-timber:publish -PVERSION_NAME="${{ inputs.version }}" --info
      env:
        SKIP_PROTO_GEN: 1
    - name: Build Apollo artifacts with Gradle
      run: ./gradlew :capture-apollo:publish -PVERSION_NAME="${{ inputs.version }}" --info
      env:
        SKIP_PROTO_GEN: 1
    - name: Build Gradle Plugin artifacts with Gradle
      run: ./gradlew :capture-plugin:publish -PVERSION_NAME="${{ inputs.version }}" --info
      env:
        SKIP_PROTO_GEN: 1
    - name: Compress Timber artifacts
      run: |
        readonly dir=$(pwd)
        (cd capture-timber/build/repos/releases/io/bitdrift/capture-timber/${{ inputs.version }} && zip -r "$dir/capture-timber-${{ inputs.version }}.android.zip" ./*)
    - name: Compress Apollo artifacts
      run: |
        readonly dir=$(pwd)
        (cd capture-apollo/build/repos/releases/io/bitdrift/capture-apollo/${{ inputs.version }} && zip -r "$dir/capture-apollo-${{ inputs.version }}.android.zip" ./*)        
    - name: Compress Android Plugin artifacts
      run: |
        readonly dir=$(pwd)
        (cd capture-plugin/build/repos/releases/io/bitdrift/capture-plugin/${{ inputs.version }} && zip -r "$dir/capture-plugin-${{ inputs.version }}.android.zip" ./*)
    - name: Compress Android Plugin marker artifacts
      run: |
        readonly dir=$(pwd)
        (cd capture-plugin/build/repos/releases/io/bitdrift/capture-plugin/io.bitdrift.capture-plugin.gradle.plugin/${{ inputs.version }} && zip -r "$dir/capture-plugin-marker-${{ inputs.version }}.android.zip" ./*)
    - name: Upload Timber artifacts
      uses: actions/upload-artifact@v4
      with:
        name: capture-timber-${{ inputs.version }}.android.zip
        path: platform/jvm/capture-timber-${{ inputs.version }}.android.zip
        if-no-files-found: error
    - name: Upload Apollo artifacts
      uses: actions/upload-artifact@v4
      with:
        name: capture-apollo-${{ inputs.version }}.android.zip
        path: platform/jvm/capture-apollo-${{ inputs.version }}.android.zip
        if-no-files-found: error        
    - name: Upload Gradle Plugin artifacts
      uses: actions/upload-artifact@v4
      with:
        name: capture-plugin-${{ inputs.version }}.android.zip
        path: platform/jvm/capture-plugin-${{ inputs.version }}.android.zip
        if-no-files-found: error
    - name: Upload Gradle Plugin marker
      uses: actions/upload-artifact@v4
      with:
        name: capture-plugin-marker-${{ inputs.version }}.android.zip
        path: platform/jvm/capture-plugin-marker-${{ inputs.version }}.android.zip
        if-no-files-found: error
