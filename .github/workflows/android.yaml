name: android
on:
  push:
    branches:
      - main
  pull_request:
# Cancel in-progress CI jobs when a new commit is pushed to a PR.
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions:
  actions: write
  contents: write
  pull-requests: write
  statuses: write

jobs:
  pre_check:
    name: pre_check
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check_changes.outputs.run_tests }}
    steps:
      # Checkout repo to Github Actions runner
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Check for Bazel build file changes
      - name: Check for Bazel build file changes
        id: bazel_check
        run: ./ci/check_bazel.sh //examples/android:android_app
        continue-on-error: true

      - name: Check for workflow file changes
        id: workflow_check
        run: ./ci/files_changed.sh .github/workflows/android.yaml
        continue-on-error: true

      - name: Check for relevant Gradle changes
        id: gradle_check
        run: ./ci/files_changed.sh "^platform/jvm/gradle-test-app/.*\.(gradle|kts|kt|xml)$" && ./ci/files_changed.sh "^platform/jvm/capture/src/test/.*$"
        continue-on-error: true

      - name: Check for Cargo.toml changes
        id: cargo_check
        run: ./ci/files_changed.sh Cargo.toml
        continue-on-error: true

      - name: Determine if tests should run
        id: check_changes_separate
        run: |
          bazel_status="${{ steps.bazel_check.outputs.check_result }}"
          workflow_status="${{ steps.workflow_check.outputs.check_result }}"
          gradle_status="${{ steps.gradle_check.outputs.check_result }}"
          cargo_status="${{ steps.cargo_check.outputs.check_result }}"

          # Check if any status indicates a relevant change or error
          if [[ "$bazel_status" == "1" || "$workflow_status" == "1" || "$gradle_status" == "1" || "$cargo_status" == "1" ]]; then
            echo "An unexpected issue occurred during checks."
            exit 1
          elif [[ "$bazel_status" == "0" || "$workflow_status" == "0" || "$gradle_status" == "0" || "$cargo_status" == "0" ]]; then
            echo "Changes detected in one or more checks. Running tests."
            echo "run_tests=true" >> $GITHUB_ENV
          elif [[ "$bazel_status" == "2" && "$workflow_status" == "2" && "$gradle_status" == "2" && "$cargo_status" == "2" ]]; then
            echo "No relevant changes found."
            echo "run_tests=false" >> $GITHUB_ENV
          else
            echo "Unknown issue."
            exit 1
          fi
        shell: bash

      - name: Run downstream tests if changes are detected
        id: check_changes
        if: env.run_tests == 'true'
        run: ./ci/run_tests.sh

  build_and_compare_sizes:
    runs-on: ubuntu-latest
    if: needs.pre_check.outputs.should_run == 'true'
    needs: pre_check
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bazel
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-cache: true
          disk-cache: ${{ github.workflow }}
          repository-cache: true

      - name: Cache llvm-strip Installation
        uses: actions/cache@v4
        id: llvm-cache
        with:
          path: ${{ runner.temp }}/llvm-bin
          key: llvm-strip-${{ runner.os }}

      - name: Populate llvm-strip cache if missing
        if: steps.llvm-cache.outputs.cache-hit != 'true'
        run: |
          set -euo pipefail
          mkdir -p "$RUNNER_TEMP/llvm-bin"
          if command -v llvm-strip &> /dev/null; then
            cp -f "$(command -v llvm-strip)" "$RUNNER_TEMP/llvm-bin/"
          else
            sudo apt update && sudo apt install -y llvm
            cp -f "$(command -v llvm-strip)" "$RUNNER_TEMP/llvm-bin/"
          fi

      - name: Add llvm-strip to PATH
        run: echo "$RUNNER_TEMP/llvm-bin" >> $GITHUB_PATH

      - name: Install llvm-strip if needed
        if: steps.llvm-cache.outputs.cache-hit != 'true'
        run: |
          if command -v llvm-strip &> /dev/null; then
            echo "llvm-strip is already installed."
          else
            echo "llvm-strip not found. Installing now..."
            sudo apt update && sudo apt install -y llvm
          fi

      - name: Verify llvm-strip version
        run: llvm-strip --version

      - name: Build Bazel APK and AAR
        timeout-minutes: 30
        run: |
          # Build APK for x86_64 (this also builds the AAR dependency)
          ./bazelw build --config ci --config release-android --android_platforms=@rules_android//:x86_64 //examples/android:android_app
          # Build AAR for x86_64 to match the APK architecture and reuse build artifacts
          ./bazelw build :capture_aar --config ci --config release-android --android_platforms=@rules_android//:x86_64

      - name: Upload PR APK
        uses: actions/upload-artifact@v4
        with:
          name: android_app.apk
          path: ./bazel-bin/examples/android/android_app.apk

      - name: Save size baselines and push to branch (main only)
        if: github.ref == 'refs/heads/main' && success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get APK size
          APK_PATH=$(find bazel-bin/examples/android -name "android_app.apk" | head -n 1)
          APK_SIZE_FILE=ci/baseline_binary_size.txt
          stat -c%s "$APK_PATH" > "$APK_SIZE_FILE"

          # Get AAR SO size
          ./tools/capture_so_size.sh x86_64 > so_size_output.txt
          SO_SIZE_KB=$(grep "SO_SIZE_KB=" so_size_output.txt | cut -d'=' -f2)
          SO_SIZE_FILE=ci/baseline_so_size_x86_64_kb.txt
          echo "$SO_SIZE_KB" > "$SO_SIZE_FILE"

          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          git fetch origin binary-size-baseline
          git worktree add temp-worktree origin/binary-size-baseline

          cp "$APK_SIZE_FILE" temp-worktree/ci/
          cp "$SO_SIZE_FILE" temp-worktree/ci/

          cd temp-worktree
          git add ci/baseline_binary_size.txt ci/baseline_so_size_x86_64_kb.txt

          if ! git diff --cached --quiet; then
            git commit -m "ci: update APK and AAR SO size baselines [skip ci]"
            git push origin HEAD:binary-size-baseline
          else
            echo "No changes to baseline sizes."
          fi

          cd ..
          git worktree remove temp-worktree --force

      - name: Fetch size baselines from branch (PR only)
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
        run: |
          git fetch origin binary-size-baseline
          git worktree add temp-baseline origin/binary-size-baseline
          cp temp-baseline/ci/baseline_binary_size.txt ci/
          if [ -f temp-baseline/ci/baseline_so_size_x86_64_kb.txt ]; then
            cp temp-baseline/ci/baseline_so_size_x86_64_kb.txt ci/
          fi
          git worktree remove temp-baseline --force

      - name: Compute and compare APK size
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
        id: apk_size
        run: |
          APK_PATH=$(find bazel-bin/examples/android -name "android_app.apk" | head -n 1)
          BASELINE_PATH=ci/baseline_binary_size.txt

          if [ -z "$APK_PATH" ]; then
            echo "Current APK file not found!"
            exit 1
          fi

          CURRENT_SIZE=$(stat -c%s "$APK_PATH")
          CURRENT_KB=$((CURRENT_SIZE / 1024))
          echo "current_kb=$CURRENT_KB" >> $GITHUB_OUTPUT

          if [ ! -f "$BASELINE_PATH" ]; then
            echo "baseline_kb=" >> $GITHUB_OUTPUT
            echo "diff_kb=" >> $GITHUB_OUTPUT
          else
            BASELINE_SIZE=$(cat "$BASELINE_PATH")
            BASELINE_KB=$((BASELINE_SIZE / 1024))
            DIFF_KB=$((CURRENT_KB - BASELINE_KB))
            echo "baseline_kb=$BASELINE_KB" >> $GITHUB_OUTPUT
            echo "diff_kb=$DIFF_KB" >> $GITHUB_OUTPUT
          fi

      - name: Compute and compare AAR SO size
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
        id: so_size
        run: |
          # Run the capture_so_size script to get the current SO size
          ./tools/capture_so_size.sh x86_64 > so_size_output.txt
          SO_SIZE_KB=$(grep "SO_SIZE_KB=" so_size_output.txt | cut -d'=' -f2)
          BASELINE_PATH=ci/baseline_so_size_x86_64_kb.txt

          if [ -z "$SO_SIZE_KB" ]; then
            echo "Current SO size not found!"
            exit 1
          fi

          echo "current_kb=$SO_SIZE_KB" >> $GITHUB_OUTPUT

          if [ ! -f "$BASELINE_PATH" ]; then
            echo "baseline_kb=" >> $GITHUB_OUTPUT
            echo "diff_kb=" >> $GITHUB_OUTPUT
          else
            BASELINE_KB=$(cat "$BASELINE_PATH")
            DIFF_KB=$((SO_SIZE_KB - BASELINE_KB))
            echo "baseline_kb=$BASELINE_KB" >> $GITHUB_OUTPUT
            echo "diff_kb=$DIFF_KB" >> $GITHUB_OUTPUT
          fi

      - name: Report sizes on PR
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
        continue-on-error: true
        uses: actions/github-script@v6
        env:
          APK_CURRENT_KB: ${{ steps.apk_size.outputs.current_kb }}
          APK_BASELINE_KB: ${{ steps.apk_size.outputs.baseline_kb }}
          APK_DIFF_KB: ${{ steps.apk_size.outputs.diff_kb }}
          SO_CURRENT_KB: ${{ steps.so_size.outputs.current_kb }}
          SO_BASELINE_KB: ${{ steps.so_size.outputs.baseline_kb }}
          SO_DIFF_KB: ${{ steps.so_size.outputs.diff_kb }}
        with:
          script: |
            const apkCurrent = process.env.APK_CURRENT_KB;
            const apkBaseline = process.env.APK_BASELINE_KB;
            const apkDiff = process.env.APK_DIFF_KB;
            const soCurrent = process.env.SO_CURRENT_KB;
            const soBaseline = process.env.SO_BASELINE_KB;
            const soDiff = process.env.SO_DIFF_KB;

            let body = '## Size Comparison Report (x86_64)\n\n';

            // Combined table for both APK and SO sizes
            if ((apkBaseline && apkBaseline !== '') || (soBaseline && soBaseline !== '')) {
              body += `
              | Metric     | APK (KB) | SO (KB) |
              |------------|-----------|---------|`;
              
              if (apkBaseline && apkBaseline !== '') {
                body += `
              | Baseline   | ${apkBaseline} | ${soBaseline || 'N/A'} |`;
              }
              
              body += `
              | Current    | ${apkCurrent} | ${soCurrent} |
              | Difference | ${apkDiff || 'N/A'} | ${soDiff || 'N/A'} |
              `;

              // Summary for APK
              if (apkBaseline && apkBaseline !== '') {
                if (parseInt(apkDiff, 10) > 0) {
                  body += `\n> APK size increased by ${apkDiff} KB.`;
                } else if (parseInt(apkDiff, 10) < 0) {
                  body += `\n> APK size decreased by ${Math.abs(apkDiff)} KB.`;
                } else {
                  body += `\n> APK size unchanged.`;
                }
              }

              // Summary for SO
              if (soBaseline && soBaseline !== '') {
                if (parseInt(soDiff, 10) > 0) {
                  body += ` SO size increased by ${soDiff} KB.`;
                } else if (parseInt(soDiff, 10) < 0) {
                  body += ` SO size decreased by ${Math.abs(soDiff)} KB.`;
                } else {
                  body += ` SO size unchanged.`;
                }
              }
            } else {
              body += `Current sizes: APK ${apkCurrent} KB, SO ${soCurrent} KB (No baselines available for comparison).`;
            }

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: body
            });

  gradle_tests:
    # Requires a "larger runner", for nested virtualization support
    runs-on: ubuntu-latest-8-cores
    env:
      SKIP_PROTO_GEN: 1
    if: needs.pre_check.outputs.should_run == 'true'
    needs: pre_check
    steps:

    - name: Checkout project sources
      uses: actions/checkout@v4

    - name: Setup Android cmd line tools + NDK
      uses: ./.github/actions/common-android-setup

    - name: Accept Android SDK licenses
      run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses

    - name: Set up Rust ARM target
      run: rustup update && rustup target add aarch64-linux-android && rustup target add x86_64-linux-android

    # See https://github.blog/changelog/2023-02-23-hardware-accelerated-android-virtualization-on-actions-windows-and-linux-larger-hosted-runners/
    - name: Enable KVM group perms
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
        cache: gradle
    - uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b
      with:
        toolchain: stable
        targets: x86_64-unknown-linux-gnu
        components: rust-src
    - name: AVD cache
      uses: actions/cache@v4
      id: avd-cache
      with:
        path: |
          ~/.android/avd/*
          ~/.android/adb*
        key: ${{ runner.os }}-avd-api-24-2
    - name: Create AVD and generate snapshot for caching
      if: steps.avd-cache.outputs.cache-hit != 'true'
      timeout-minutes: 30
      uses: reactivecircus/android-emulator-runner@62dbb605bba737720e10b196cb4220d374026a6d # pin@v2.33
      with:
        channel: stable
        force-avd-creation: false
        api-level: 24
        target: default
        ram-size: 2048M
        arch: x86_64
        disk-size: 6144M
        profile: Nexus 6
        disable-animations: true
        emulator-options: -no-window -accel on -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        script: echo "Generated AVD snapshot for caching."
    - name: Gradle capture-timber unit tests
      working-directory: ./platform/jvm
      run: ./gradlew capture-timber:testReleaseUnitTest --info
    - name: Check Licenses for modules
      working-directory: ./platform/jvm
      run: ./gradlew replay:checkLicense common:checkLicense capture:checkLicense
    - name: Build Microbenchmark target
      working-directory: ./platform/jvm
      run: ./gradlew microbenchmark:assembleAndroidTest
    - name: Instrumentation Tests
      uses: reactivecircus/android-emulator-runner@62dbb605bba737720e10b196cb4220d374026a6d # pin@v2.33
      with:
        channel: stable
        force-avd-creation: false
        api-level: 24
        target: default
        ram-size: 2048M
        arch: x86_64
        disk-size: 6144M
        profile: Nexus 6
        disable-animations: true
        emulator-options: -no-snapshot-save -no-window -accel on -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        script: cd platform/jvm && adb uninstall io.bitdrift.gradletestapp.test; adb uninstall io.bitdrift.gradletestapp; cd ../.. && ./tools/android_sdk_wrapper.sh platform/jvm/gradlew -Prust-target=x86_64 -p platform/jvm gradle-test-app:check gradle-test-app:connectedCheck --stacktrace

  verify_android_hello_world_per_version:
    needs: build_and_compare_sizes
    runs-on: ubuntu-latest-8-cores
    strategy:
      matrix:
        api-level: [24, 35]
    steps:
      # Checkout repo to Github Actions runner
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # See https://github.blog/changelog/2023-02-23-hardware-accelerated-android-virtualization-on-actions-windows-and-linux-larger-hosted-runners/
      - name: Enable KVM group perms
        run: |
            echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
            sudo udevadm control --reload-rules
            sudo udevadm trigger --name-match=kvm
      - uses: actions/download-artifact@v4
        with:
          name: android_app.apk
          path: .
      - name: AVD cache
        uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: ${{ runner.os }}-avd-api${{ matrix.api-level }}-1
      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        timeout-minutes: 30
        uses: reactivecircus/android-emulator-runner@62dbb605bba737720e10b196cb4220d374026a6d # pin@v2.33
        with:
          channel: stable
          api-level: ${{ matrix.api-level }}
          target: google_apis
          ram-size: 2048M
          arch: x86_64
          disk-size: 6144M
          profile: Nexus 6
          emulator-options: -no-window -accel on -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          script: echo "Generated AVD snapshot for caching."
      - name: run tests
        uses: reactivecircus/android-emulator-runner@62dbb605bba737720e10b196cb4220d374026a6d # pin@v2.33
        timeout-minutes: 15
        with:
          force-avd-creation: false
          channel: stable
          api-level: ${{ matrix.api-level }}
          target: google_apis
          ram-size: 2048M
          arch: x86_64
          disk-size: 6144M
          profile: Nexus 6
          emulator-options: -no-snapshot-save -no-window -accel on -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          script: ./ci/verify_android.sh

  # This is a noop job that completes once all the jobs spawned by the previous step completes. By blocking PR merges on this
  # job completing, we are able to gate it on all the previous jobs without explicitly enumerating them.
  verify_android:
    runs-on: ubuntu-latest
    needs: ["pre_check", "build_and_compare_sizes", "verify_android_hello_world_per_version", "gradle_tests"]
    if: always()
    steps:
    # Checkout repo to Github Actions runner
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - name: check result
      run: ./ci/check_result.sh ${{ needs.pre_check.result }} && ./ci/check_result.sh ${{ needs.build_and_compare_sizes.result }} && ./ci/check_result.sh ${{ needs.verify_android_hello_world_per_version.result }} && ./ci/check_result.sh ${{ needs.gradle_tests.result }}
