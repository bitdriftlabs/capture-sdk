env:
  NDK_VERSION: 27.2.12479018

name: android
on:
  push:
    branches:
      - main
  pull_request:
# Cancel in-progress CI jobs when a new commit is pushed to a PR.
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions:
  actions: write
  contents: write
  pull-requests: write
  statuses: write

jobs:
  pre_check:
    name: pre_check
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check_changes.outputs.run_tests }}
    steps:
      # Checkout repo to Github Actions runner
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Check for Bazel build file changes
      - name: Check for Bazel build file changes
        id: bazel_check
        run: ./ci/check_bazel.sh //examples/android:android_app
        continue-on-error: true

      - name: Check for workflow file changes
        id: workflow_check
        run: ./ci/files_changed.sh .github/workflows/android.yaml
        continue-on-error: true

      - name: Check for relevant Gradle changes
        id: gradle_check
        run: ./ci/files_changed.sh "^platform/jvm/gradle-test-app/.*\.(gradle|kts|kt|xml)$"
        continue-on-error: true

      - name: Check for Cargo.toml changes
        id: cargo_check
        run: ./ci/files_changed.sh Cargo.toml
        continue-on-error: true

      - name: Determine if tests should run
        id: check_changes_separate
        run: |
          bazel_status="${{ steps.bazel_check.outputs.check_result }}"
          workflow_status="${{ steps.workflow_check.outputs.check_result }}"
          gradle_status="${{ steps.gradle_check.outputs.check_result }}"
          cargo_status="${{ steps.cargo_check.outputs.check_result }}"

          # Check if any status indicates a relevant change or error
          if [[ "$bazel_status" == "1" || "$workflow_status" == "1" || "$gradle_status" == "1" || "$cargo_status" == "1" ]]; then
            echo "An unexpected issue occurred during checks."
            exit 1
          elif [[ "$bazel_status" == "0" || "$workflow_status" == "0" || "$gradle_status" == "0" || "$cargo_status" == "0" ]]; then
            echo "Changes detected in one or more checks. Running tests."
            echo "run_tests=true" >> $GITHUB_ENV
          elif [[ "$bazel_status" == "2" && "$workflow_status" == "2" && "$gradle_status" == "2" && "$cargo_status" == "2" ]]; then
            echo "No relevant changes found."
            echo "run_tests=false" >> $GITHUB_ENV
          else
            echo "Unknown issue."
            exit 1
          fi
        shell: bash

      - name: Run downstream tests if changes are detected
        id: check_changes
        if: env.run_tests == 'true'
        run: ./ci/run_tests.sh

  build_and_compare_apk:
    runs-on: ubuntu-latest
    if: needs.pre_check.outputs.should_run == 'true'
    needs: pre_check
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build Bazel APK 
        timeout-minutes: 30
        run: ./bazelw build --config ci --config release-android --android_platforms=@rules_android//:x86_64 //examples/android:android_app

      - name: Upload PR APK
        uses: actions/upload-artifact@v4
        with:
          name: android_app.apk
          path: ./bazel-bin/examples/android/android_app.apk

      - name: Save APK and .so size baseline and push to branch (main only)
        # Testing if: github.ref == 'refs/heads/main' && success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          APK_PATH=$(find bazel-bin/examples/android -name "android_app.apk" | head -n 1)
          SIZE_FILE=ci/baseline_binary_size.txt

          # Get APK size
          APK_SIZE=$(stat -c%s "$APK_PATH")

          # Extract, strip, and get .so size (arm64-v8a)
          ABI=arm64-v8a
          TMPDIR=$(mktemp -d)
          unzip -j "$APK_PATH" "lib/$ABI/*.so" -d "$TMPDIR"

          SO_SIZE=0
          for SO in $TMPDIR/*.so; do
            llvm-strip "$SO" || echo "llvm-strip failed for $SO"
            SO_SIZE=$(stat -c%s "$SO")
            break  # only first .so found, remove break for multiple
          done

          # Write sizes as comma-separated values
          echo "${APK_SIZE},${SO_SIZE}" > "$SIZE_FILE"

          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          git fetch origin binary-size-baseline
          git worktree add temp-worktree origin/binary-size-baseline

          cp "$SIZE_FILE" temp-worktree/ci/

          cd temp-worktree
          git add ci/baseline_binary_size.txt

          if ! git diff --cached --quiet; then
            git commit -m "ci: update Bazel APK and .so size baseline [skip ci]"
            git push origin HEAD:binary-size-baseline
          else
            echo "No changes to baseline size."
          fi

          cd ..
          git worktree remove temp-worktree --force

      - name: Fetch APK size baseline from branch (PR only)
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
        run: |
          git fetch origin binary-size-baseline
          git worktree add temp-baseline origin/binary-size-baseline
          cp temp-baseline/ci/baseline_binary_size.txt ci/
          git worktree remove temp-baseline --force

      - name: Compute and compare APK and .so size
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
        id: apk_size
        run: |
          APK_PATH=$(find bazel-bin/examples/android -name "android_app.apk" | head -n 1)
          BASELINE_PATH=ci/baseline_binary_size.txt

          if [ -z "$APK_PATH" ]; then
            echo "❌ Current APK file not found!"
            exit 1
          fi

          # Get current APK size
          CURRENT_APK_SIZE=$(stat -c%s "$APK_PATH")

          # Extract, strip, and get current .so size (arm64-v8a)
          ABI=arm64-v8a
          TMPDIR=$(mktemp -d)
          unzip -j "$APK_PATH" "lib/$ABI/*.so" -d "$TMPDIR"

          CURRENT_SO_SIZE=0
          for SO in $TMPDIR/*.so; do
            llvm-strip "$SO" || echo "llvm-strip failed for $SO"
            CURRENT_SO_SIZE=$(stat -c%s "$SO")
            break  # Only first .so
          done

          CURRENT_APK_KB=$((CURRENT_APK_SIZE / 1024))
          CURRENT_SO_KB=$((CURRENT_SO_SIZE / 1024))
          echo "current_apk_kb=$CURRENT_APK_KB" >> $GITHUB_OUTPUT
          echo "current_so_kb=$CURRENT_SO_KB" >> $GITHUB_OUTPUT

          if [ ! -f "$BASELINE_PATH" ]; then
            echo "baseline_apk_kb=" >> $GITHUB_OUTPUT
            echo "diff_apk_kb=" >> $GITHUB_OUTPUT
            echo "baseline_so_kb=" >> $GITHUB_OUTPUT
            echo "diff_so_kb=" >> $GITHUB_OUTPUT
          else
            BASELINE_LINE=$(cat "$BASELINE_PATH")
            BASELINE_APK_SIZE=$(echo "$BASELINE_LINE" | cut -d',' -f1)
            BASELINE_SO_SIZE=$(echo "$BASELINE_LINE" | cut -d',' -f2)
            BASELINE_APK_KB=$((BASELINE_APK_SIZE / 1024))
            BASELINE_SO_KB=$((BASELINE_SO_SIZE / 1024))
            DIFF_APK_KB=$((CURRENT_APK_KB - BASELINE_APK_KB))
            DIFF_SO_KB=$((CURRENT_SO_KB - BASELINE_SO_KB))

            echo "baseline_apk_kb=$BASELINE_APK_KB" >> $GITHUB_OUTPUT
            echo "diff_apk_kb=$DIFF_APK_KB" >> $GITHUB_OUTPUT
            echo "baseline_so_kb=$BASELINE_SO_KB" >> $GITHUB_OUTPUT
            echo "diff_so_kb=$DIFF_SO_KB" >> $GITHUB_OUTPUT
          fi

      - name: Report APK and .so size on PR
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
        uses: actions/github-script@v6
        env:
          CURRENT_APK_KB: ${{ steps.apk_size.outputs.current_apk_kb }}
          BASELINE_APK_KB: ${{ steps.apk_size.outputs.baseline_apk_kb }}
          DIFF_APK_KB: ${{ steps.apk_size.outputs.diff_apk_kb }}
          CURRENT_SO_KB: ${{ steps.apk_size.outputs.current_so_kb }}
          BASELINE_SO_KB: ${{ steps.apk_size.outputs.baseline_so_kb }}
          DIFF_SO_KB: ${{ steps.apk_size.outputs.diff_so_kb }}
        with:
          script: |
            const c_apk = process.env.CURRENT_APK_KB;
            const b_apk = process.env.BASELINE_APK_KB;
            const d_apk = process.env.DIFF_APK_KB;

            const c_so = process.env.CURRENT_SO_KB;
            const b_so = process.env.BASELINE_SO_KB;
            const d_so = process.env.DIFF_SO_KB;

            let body = '';

            if (b_apk && b_apk !== '' && b_so && b_so !== '') {
              body = `
              ### 📦 Bazel APK(x86_64) and libcapture.so (arm64-v8a) Size Report

              | Artifact      | Baseline (KB) | Current (KB) | Difference (KB) |
              |--------------|---------------|--------------|-----------------|
              | APK          | ${b_apk}      | ${c_apk}     | ${d_apk}        |
              | libcapture.so| ${b_so}       | ${c_so}      | ${d_so}         |
              `;

              // APK diff note
              if (parseInt(d_apk, 10) > 0) {
                body += `\n> ❌ APK size increased by ${d_apk} KB.`;
              } else if (parseInt(d_apk, 10) < 0) {
                body += `\n> ✅ APK size decreased by ${Math.abs(d_apk)} KB.`;
              } else {
                body += `\n> ✅ APK size unchanged.`;
              }

              // SO diff note
              if (parseInt(d_so, 10) > 0) {
                body += `\n> ❌ libcapture.so size increased by ${d_so} KB.`;
              } else if (parseInt(d_so, 10) < 0) {
                body += `\n> ✅ libcapture.so size decreased by ${Math.abs(d_so)} KB.`;
              } else {
                body += `\n> ✅ libcapture.so size unchanged.`;
              }
            } else {
              body = `📌 Current Bazel APK(x86_64) size: ${c_apk} KB\n📌 Current libcapture.so (arm64-v8a) size: ${c_so} KB (No baseline available for comparison).`;
            }

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: body
            });

  gradle_tests:
    # Requires a "larger runner", for nested virtualization support
    runs-on: ubuntu-latest-8-cores
    env:
      SKIP_PROTO_GEN: 1
    if: needs.pre_check.outputs.should_run == 'true'
    needs: pre_check
    steps:

    - name: Checkout project sources
      uses: actions/checkout@v4

    - name: Cache Android NDK
      id: ndk-cache
      uses: actions/cache@v4
      with:
        path: ${{ env.ANDROID_SDK_ROOT }}/ndk/${{ env.NDK_VERSION }}
        key: ${{ runner.os }}-android-ndk-${{ env.NDK_VERSION }}

    - name: Verify cmdline-tools
      run: |
        CMDLINE_TOOLS_DIR="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin"
        if [ ! -x "$CMDLINE_TOOLS_DIR/sdkmanager" ]; then
          echo "cmdline-tools not found or incomplete. Installing..."
          mkdir -p $ANDROID_SDK_ROOT/cmdline-tools
          cd $ANDROID_SDK_ROOT/cmdline-tools
          curl -sSL https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -o cmdline-tools.zip
          unzip -q cmdline-tools.zip
          mv cmdline-tools latest
        else
          echo "cmdline-tools already installed."
        fi

    - name: Install Android NDK
      if: steps.ndk-cache.outputs.cache-hit != 'true'
      run: |
        export PATH=$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH
        yes | sdkmanager "ndk;${NDK_VERSION}"

    # See https://github.blog/changelog/2023-02-23-hardware-accelerated-android-virtualization-on-actions-windows-and-linux-larger-hosted-runners/
    - name: Enable KVM group perms
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
        cache: gradle
    - name: Set up Rust ARM target
      run: rustup update && rustup target add aarch64-linux-android && rustup target add x86_64-linux-android
    - name: AVD cache
      uses: actions/cache@v4
      id: avd-cache
      with:
        path: |
          ~/.android/avd/*
          ~/.android/adb*
        key: ${{ runner.os }}-avd-api-24-2
    - name: Create AVD and generate snapshot for caching
      if: steps.avd-cache.outputs.cache-hit != 'true'
      timeout-minutes: 30
      uses: reactivecircus/android-emulator-runner@62dbb605bba737720e10b196cb4220d374026a6d # pin@v2.33
      with:
        channel: stable
        force-avd-creation: false
        api-level: 24
        target: default
        ram-size: 2048M
        arch: x86_64
        disk-size: 6144M
        profile: Nexus 6
        disable-animations: true
        emulator-options: -no-window -accel on -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        script: echo "Generated AVD snapshot for caching."
    - name: Gradle capture-timber unit tests
      working-directory: ./platform/jvm
      run: ./gradlew capture-timber:testReleaseUnitTest --info
    - name: Check Licenses for modules
      working-directory: ./platform/jvm
      run: ./gradlew replay:checkLicense common:checkLicense capture:checkLicense
    - name: Build Microbenchmark target
      working-directory: ./platform/jvm
      run: ./gradlew microbenchmark:assembleAndroidTest
    - name: Instrumentation Tests
      uses: reactivecircus/android-emulator-runner@62dbb605bba737720e10b196cb4220d374026a6d # pin@v2.33
      with:
        channel: stable
        force-avd-creation: false
        api-level: 24
        target: default
        ram-size: 2048M
        arch: x86_64
        disk-size: 6144M
        profile: Nexus 6
        disable-animations: true
        emulator-options: -no-snapshot-save -no-window -accel on -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        script: cd platform/jvm && adb uninstall io.bitdrift.gradletestapp.test; adb uninstall io.bitdrift.gradletestapp; cd ../.. && ./tools/android_sdk_wrapper.sh platform/jvm/gradlew -p platform/jvm gradle-test-app:check gradle-test-app:connectedCheck --stacktrace

  verify_android_hello_world_per_version:
    needs: build_and_compare_apk
    runs-on: ubuntu-latest-8-cores
    strategy:
      matrix:
        api-level: [24, 35]
    steps:
      # Checkout repo to Github Actions runner
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # See https://github.blog/changelog/2023-02-23-hardware-accelerated-android-virtualization-on-actions-windows-and-linux-larger-hosted-runners/
      - name: Enable KVM group perms
        run: |
            echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
            sudo udevadm control --reload-rules
            sudo udevadm trigger --name-match=kvm
      - uses: actions/download-artifact@v4
        with:
          name: android_app.apk
          path: .
      - name: AVD cache
        uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: ${{ runner.os }}-avd-api${{ matrix.api-level }}-1
      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        timeout-minutes: 30
        uses: reactivecircus/android-emulator-runner@62dbb605bba737720e10b196cb4220d374026a6d # pin@v2.33
        with:
          channel: stable
          api-level: ${{ matrix.api-level }}
          target: google_apis
          ram-size: 2048M
          arch: x86_64
          disk-size: 6144M
          profile: Nexus 6
          emulator-options: -no-window -accel on -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          script: echo "Generated AVD snapshot for caching."
      - name: run tests
        uses: reactivecircus/android-emulator-runner@62dbb605bba737720e10b196cb4220d374026a6d # pin@v2.33
        timeout-minutes: 15
        with:
          force-avd-creation: false
          channel: stable
          api-level: ${{ matrix.api-level }}
          target: google_apis
          ram-size: 2048M
          arch: x86_64
          disk-size: 6144M
          profile: Nexus 6
          emulator-options: -no-snapshot-save -no-window -accel on -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          script: ./ci/verify_android.sh

  # This is a noop job that completes once all the jobs spawned by the previous step completes. By blocking PR merges on this
  # job completing, we are able to gate it on all the previous jobs without explicitly enumerating them.
  verify_android:
    runs-on: ubuntu-latest
    needs: ["pre_check", "build_and_compare_apk", "verify_android_hello_world_per_version", "gradle_tests"]
    if: always()
    steps:
    # Checkout repo to Github Actions runner
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - name: check result
      run: ./ci/check_result.sh ${{ needs.pre_check.result }} && ./ci/check_result.sh ${{ needs.build_and_compare_apk.result }} && ./ci/check_result.sh ${{ needs.verify_android_hello_world_per_version.result }} && ./ci/check_result.sh ${{ needs.gradle_tests.result }}
