module(name = "capture-sdk")

####################
# Constants
####################

RUST_VERSION = "1.85.0"

OKHTTP_VERSION = "4.12.0"

LIFECYCLE_VERSION = "2.8.7"

COMPOSE_VERSION = "1.7.0"

KOTLIN_COMPILE_VERSION = "2.0.0"

KOTLIN_COMPILER_SHA = "ef578730976154fd2c5968d75af8c2703b3de84a78dffe913f670326e149da3b"

KOTLIN_STD_VERSION = KOTLIN_COMPILE_VERSION

NDK_API_LEVEL = 21

####################
# Bazel dependencies
####################

http_jar = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_jar")

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

new_git_repository = use_repo_rule("@bazel_tools//tools/build_defs/repo:git.bzl", "new_git_repository")

bazel_dep(name = "rules_robolectric", version = "4.14.1.2")
bazel_dep(name = "rules_multirun", version = "0.10.0")
bazel_dep(name = "apple_support", version = "1.17.1", repo_name = "build_bazel_apple_support")
bazel_dep(name = "rules_swift", version = "2.3.1")

# We need to support 1x because flatbuffers haven't updated to 2x yet
multiple_version_override(
    module_name = "rules_swift",
    versions = [
        "2.3.1",
        "1.16.0",
    ],
)

bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "rules_xcodeproj", version = "2.10.0")
bazel_dep(name = "rules_apple", version = "3.16.1")
bazel_dep(name = "rules_pkg", version = "1.0.1")
bazel_dep(name = "rules_cc", version = "0.1.0")
bazel_dep(name = "rules_java", version = "8.6.3")
bazel_dep(name = "rules_android", version = "0.6.0")
bazel_dep(name = "rules_android_ndk", version = "0.1.2")
bazel_dep(name = "rules_jvm_external", version = "6.6")
bazel_dep(name = "rules_detekt", version = "0.8.1.2")
bazel_dep(name = "flatbuffers", version = "24.3.25")
bazel_dep(name = "platforms", version = "0.0.11")
bazel_dep(name = "rules_kotlin", version = "2.0.0")
bazel_dep(name = "rules_rust", version = "0.58.0")
bazel_dep(name = "rules_shell", version = "0.4.0")

# Required by android_artifacts for pom_file, it's not in bazel central registry
bazel_dep(name = "google_bazel_common", version = "0.0.1")

http_jar(
    name = "bazel_diff",
    sha256 = "0b9e32f9c20e570846b083743fe967ae54d13e2a1f7364983e0a7792979442be",
    url = "https://github.com/Tinder/bazel-diff/releases/download/7.0.0/bazel-diff_deploy.jar",
)

new_git_repository(
    name = "bitdrift_api",
    branch = "main",
    build_file = "//bazel:BUILD.bitdriftlabs_api",
    remote = "https://github.com/bitdriftlabs/api.git",
)

git_override(
    module_name = "google_bazel_common",
    commit = "c35b0339ae7d7ac95761f69f4a0eed033163cc80",
    remote = "https://github.com/google/bazel-common",
)

http_archive(
    name = "Difference",
    build_file = "@//bazel/third_party:Difference.BUILD",
    sha256 = "7ffc131fd19b7c1ea390d186b942aa6b7ff732add9e6df34281fe9f777656968",
    strip_prefix = "Difference-1.1.0",
    urls = ["https://github.com/krzysztofzablocki/Difference/archive/1.1.0.tar.gz"],
)

http_archive(
    name = "SwiftBenchmark",
    build_file = "@//bazel/third_party:SwiftBenchmark.BUILD",
    sha256 = "9c5bccfbddaeed7d3aa731118644655c0e550ab2267e1a3238ca0daa06ade0f9",
    strip_prefix = "swift-benchmark-0.1.2",
    urls = ["https://github.com/google/swift-benchmark/archive/0.1.2.tar.gz"],
)

http_archive(
    name = "SwiftArgumentParser",
    build_file = "@//bazel/third_party:SwiftArgumentParser.BUILD",
    sha256 = "946a4cf7bdd2e4f0f8b82864c56332238ba3f0a929c6d1a15f55affdb10634e6",
    strip_prefix = "swift-argument-parser-1.5.0",
    urls = ["https://github.com/apple/swift-argument-parser/archive/1.5.0.tar.gz"],
)

http_archive(
    name = "DrString",
    build_file_content = """exports_files(["drstring"])""",
    sha256 = "99833f0ad3d9f3bbf40aee88c6f959a0a9b03e3b7b34e2fca660644e13c1f3ef",
    url = "https://github.com/dduan/DrString/releases/download/0.6.1/drstring-universal-apple-darwin.tar.gz",
)

http_archive(
    name = "DrString_Linux",
    build_file_content = """
load("@bazel_skylib//rules:native_binary.bzl", "native_binary")
native_binary(
    name = "DrString_Linux",
    src = "usr/bin/drstring",
    out = "usr/bin/drstring",
    data = glob(["usr/lib/*.so"]),
    visibility = ["//visibility:public"],
)
    """,
    sha256 = "50cbf3dbb9b675d7bd179b02e7925f3729d2e0c8c9fd4df09ea1cd2f15c50205",
    url = "https://github.com/dduan/DrString/releases/download/0.6.1/drstring-x86_64-unknown-ubuntu.tar.gz",
)

####################
# Android extensions
####################

android_ndk_repository_extension = use_extension("@rules_android_ndk//:extension.bzl", "android_ndk_repository_extension")
android_ndk_repository_extension.configure(api_level = NDK_API_LEVEL)
use_repo(android_ndk_repository_extension, "androidndk")

register_toolchains("@androidndk//:all")

rules_kotlin_extensions = use_extension("@rules_kotlin//src/main/starlark/core/repositories:bzlmod_setup.bzl", "rules_kotlin_extensions")
rules_kotlin_extensions.kotlinc_version(
    sha256 = KOTLIN_COMPILER_SHA,
    version = KOTLIN_COMPILE_VERSION,
)

register_toolchains("//:kotlin_toolchain")

maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
maven.install(
    aar_import_bzl_label = "@rules_android//rules:rules.bzl",
    artifacts = [
        "com.squareup.okio:okio:3.10.2",
        "com.squareup.okio:okio-jvm:3.10.2",
        "com.google.code.findbugs:jsr305:3.0.2",

        # Dokka (javadocs generator)
        "org.jetbrains.dokka:analysis-kotlin-descriptors:1.9.10",
        "org.jetbrains.dokka:dokka-base:1.9.10",
        "org.jetbrains.dokka:dokka-cli:1.9.10",

        # Library dependencies
        "com.michael-bull.kotlin-result:kotlin-result-jvm:1.1.18",
        "com.google.code.gson:gson:2.10.1",
        "com.squareup.okhttp3:okhttp:{}".format(OKHTTP_VERSION),
        "androidx.startup:startup-runtime:1.2.0",
        "androidx.core:core:1.13.1",
        "com.google.guava:listenablefuture:1.0",  #required by androidx.lifecycle:lifecycle-process below
        "androidx.lifecycle:lifecycle-common:{}".format(LIFECYCLE_VERSION),
        "androidx.lifecycle:lifecycle-process:{}".format(LIFECYCLE_VERSION),
        "org.jetbrains.kotlin:kotlin-stdlib:{}".format(KOTLIN_STD_VERSION),
        "androidx.emoji2:emoji2:1.5.0",
        "androidx.collection:collection:1.4.5",
        "androidx.metrics:metrics-performance:1.0.0-beta01",
        "androidx.work:work-runtime-ktx:2.10.1",

        # Compose
        "org.jetbrains.kotlin:kotlin-compose-compiler-plugin-embeddable:{}".format(KOTLIN_COMPILE_VERSION),
        "org.jetbrains:annotations:26.0.1",
        "androidx.core:core-ktx:1.13.1",
        "androidx.appcompat:appcompat:1.7.0",
        "androidx.activity:activity-compose:1.9.3",
        "androidx.compose.material:material:{}".format(COMPOSE_VERSION),
        "androidx.compose.ui:ui:{}".format(COMPOSE_VERSION),
        "androidx.compose.ui:ui-tooling:{}".format(COMPOSE_VERSION),
        "androidx.compose.runtime:runtime:{}".format(COMPOSE_VERSION),
        "androidx.annotation:annotation-jvm:1.9.1",
    ],
    repositories = [
        "https://repo1.maven.org/maven2",
        "https://maven.google.com",
    ],
    use_starlark_android_rules = True,
    version_conflict_policy = "pinned",
)

# Test artifacts
maven.artifact(
    testonly = True,
    artifact = "mockito-core",
    group = "org.mockito",
    version = "4.11.0",
)
maven.artifact(
    testonly = True,
    artifact = "mockito-inline",
    group = "org.mockito",
    version = "4.11.0",
)
maven.artifact(
    testonly = True,
    artifact = "mockito-kotlin",
    group = "com.nhaarman.mockitokotlin2",
    version = "2.2.0",
)
maven.artifact(
    testonly = True,
    artifact = "core",
    group = "androidx.test",
    version = "1.6.0",
)
maven.artifact(
    testonly = True,
    artifact = "robolectric",
    group = "org.robolectric",
    version = "4.14",
)
maven.artifact(
    testonly = True,
    artifact = "android-all",
    group = "org.robolectric",
    version = "15-robolectric-12650502",
)
maven.artifact(
    testonly = True,
    artifact = "assertj-core",
    group = "org.assertj",
    version = "3.22.0",
)
maven.artifact(
    testonly = True,
    artifact = "mockwebserver",
    group = "com.squareup.okhttp3",
    version = OKHTTP_VERSION,
)
maven.artifact(
    testonly = True,
    artifact = "junit",
    group = "junit",
    version = "4.13.2",
)
maven.artifact(
    testonly = True,
    artifact = "classgraph",
    group = "io.github.classgraph",
    version = "4.8.146",
)
use_repo(maven, "maven")

####################
# Rust extensions
####################

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    extra_target_triples = [
        "aarch64-apple-ios-sim",
        "aarch64-apple-ios",
        "aarch64-linux-android",
        "armv7-linux-androideabi",
        "i686-linux-android",
        "x86_64-apple-ios",
        "x86_64-linux-android",
    ],
    rustfmt_version = "nightly/2025-03-05",
    # We need this shas, since these archives are generated by us and we want to make sure we always use these as opposed
    # to the official ones. There is a `rust_std_checksum.sh` script that generates these shas in the `tools` directory.
    # For security reasons, we include all shas here to make sure that a malicious actor with access to rust-std-mobile
    # can't include a compromised tool.
    #
    # tl;dr; run e.g. $ ./tools/rust_std_checksum.sh 1.82.0
    sha256s = {
        "rust-std-" + RUST_VERSION + "-aarch64-apple-ios-sim.tar.gz": "2b5ac05b89a9b90f62244e598cca00f3945b77326055d6eb19ac4add68288079",
        "rust-std-" + RUST_VERSION + "-aarch64-apple-ios.tar.gz": "9b4d07577be9db083a67d976b40438446291bf36c2e51d76dbb582beae4d3a0b",
        "rust-std-" + RUST_VERSION + "-x86_64-apple-ios.tar.gz": "28eea9617806b99bca7ed4839ae3d92e49d4af6b194039ff97f726733460883b",
        "rust-std-" + RUST_VERSION + "-aarch64-linux-android.tar.gz": "617630bd1f4819ea0a002ea78c588e3fd7fda0e3e4d2e6196a9a561882ef3cbf",
        "rust-std-" + RUST_VERSION + "-armv7-linux-androideabi.tar.gz": "6b57c2dadecfab435d6ff9a097504c76b6981edd4e57d7563ef277b663bf095a",
        "rust-std-" + RUST_VERSION + "-i686-linux-android.tar.gz": "0d359441c209336f4cfab29f6c923511406715732936d9d8b14f4cf1fb8f3644",
        "rustc-" + RUST_VERSION + "-aarch64-apple-darwin.tar.gz": "458d9ccfab76f4d98ab363bd8575d6ba7cb2b2e4e88ec247334962d416657b31",
        "cargo-" + RUST_VERSION + "-aarch64-apple-darwin.tar.gz": "b280ffddaefd6ce6979390ccdadfbb222eebcb85d070286bff56c8fb016ada30",
        "llvm-tools-" + RUST_VERSION + "-aarch64-apple-darwin.tar.gz": "18818895811612dbc10a72f016257f99bbf9d1be77001de3d7aeaf090a1fa35a",
        "rust-std-" + RUST_VERSION + "-aarch64-apple-darwin.tar.gz": "b7ff9bc2cabc6277e2ec6d73ca5b3e5ea5e2a0582e5e5302ef9e354f348dab68",
        "clippy-" + RUST_VERSION + "-aarch64-apple-darwin.tar.gz": "668cb7689ac1b0f0b79d11c282e554e2706d9a4ba0455208064467ea956cbeec",
        "rustfmt-" + RUST_VERSION + "-aarch64-apple-darwin.tar.gz": "c71125d920a37981a962671873a492ebe9d5b06dd681b66f050e58d059fd404f",
    },
    urls = [
        # NOTE: `urls` are technically mirrors so we want to make sure we always try our own first then the official ones.
        # We'll ensure that the ones we want to serve always come from us by the previous sha256s dictionary. Please ensure
        # that the extensions on both of these are the same.
        "https://github.com/bitdriftlabs/rust-std-mobile/releases/download/" + RUST_VERSION + "/{}.tar.gz",

        # We need this because we only serve std for mobile archs but rustc, clippy, cargo, llvm-tools and even std for
        # apple-darwin/linux are served from the official mirror.
        "https://static.rust-lang.org/dist/{}.tar.gz",
    ],
    versions = [
        RUST_VERSION,
    ],
)
use_repo(rust, "rust_toolchains")

crate = use_extension("@rules_rust//crate_universe:extensions.bzl", "crate")
crate.from_cargo(
    name = "crates",
    cargo_config = "//:Cargo.toml",
    cargo_lockfile = "//:Cargo.lock",
    # This trades the chance that the registry gets corrupted for speed when repinning.
    isolated = False,
    lockfile = "//:Cargo.Bazel.lock",
    manifests = [
        "//:Cargo.toml",
        "//proto:Cargo.toml",
        "//platform/jvm:Cargo.toml",
        "//test/platform/jvm:Cargo.toml",
        "//platform/shared:Cargo.toml",
        "//platform/swift/source:Cargo.toml",
        "//platform/test_helpers:Cargo.toml",
        "//test/platform/pom_checker:Cargo.toml",
        "//test/platform/swift/bridging:Cargo.toml",
        "//test/benchmark:Cargo.toml",
    ],
    supported_platform_triples = [
        "aarch64-apple-ios-sim",
        "aarch64-apple-ios",
        "aarch64-linux-android",
        "armv7-linux-androideabi",
        "i686-linux-android",
        "x86_64-apple-ios",
        "x86_64-linux-android",
        "aarch64-apple-darwin",
        "x86_64-unknown-linux-gnu",
    ],
)
crate.annotation(
    build_script_env = {"SKIP_PROTO_GEN": "1"},
    crate = "bd-grpc",
)
crate.annotation(
    build_script_env = {"SKIP_PROTO_GEN": "1"},
    crate = "bd-pgv",
)
crate.annotation(
    build_script_env = {"SKIP_PROTO_GEN": "1"},
    crate = "bd-proto",
)

# A recent rustix update seems to have broken something here, so manually add in the crates we need to build under Bazel.
crate.annotation(
    crate = "linux-raw-sys",
    crate_features = [
        "errno",
        "std",
        "general",
        "ioctl",
    ],
)
use_repo(crate, "crates")
